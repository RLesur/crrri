% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/events_Debugger.R
\name{Debugger.scriptParsed}
\alias{Debugger.scriptParsed}
\title{Await the event Debugger.scriptParsed or create a callback}
\usage{
Debugger.scriptParsed(promise, scriptId = NULL, url = NULL,
  startLine = NULL, startColumn = NULL, endLine = NULL,
  endColumn = NULL, executionContextId = NULL, hash = NULL,
  executionContextAuxData = NULL, isLiveEdit = NULL,
  sourceMapURL = NULL, hasSourceURL = NULL, isModule = NULL,
  length = NULL, stackTrace = NULL, .callback = NULL)
}
\arguments{
\item{promise}{An asynchronous result object.}

\item{scriptId}{A Runtime.ScriptId.
Identifier of the script parsed. Accepted values: \code{~ .res$scriptId} (to refer to the previous result).}

\item{url}{A character string.
URL or name of the script parsed (if any). Accepted values: \code{~ .res$url} (to refer to the previous result).}

\item{startLine}{An integer.
Line offset of the script within the resource with given URL (for script tags). Accepted values: \code{~ .res$startLine} (to refer to the previous result).}

\item{startColumn}{An integer.
Column offset of the script within the resource with given URL. Accepted values: \code{~ .res$startColumn} (to refer to the previous result).}

\item{endLine}{An integer.
Last line of the script. Accepted values: \code{~ .res$endLine} (to refer to the previous result).}

\item{endColumn}{An integer.
Length of the last line of the script. Accepted values: \code{~ .res$endColumn} (to refer to the previous result).}

\item{executionContextId}{A Runtime.ExecutionContextId.
Specifies script creation context. Accepted values: \code{~ .res$executionContextId} (to refer to the previous result).}

\item{hash}{A character string.
Content hash of the script. Accepted values: \code{~ .res$hash} (to refer to the previous result).}

\item{executionContextAuxData}{NA
Embedder-specific auxiliary data. Accepted values: \code{~ .res$executionContextAuxData} (to refer to the previous result).}

\item{isLiveEdit}{Experimental. A logical.
True, if this script is generated as a result of the live edit operation. Accepted values: \code{~ .res$isLiveEdit} (to refer to the previous result).}

\item{sourceMapURL}{A character string.
URL of source map associated with script (if any). Accepted values: \code{~ .res$sourceMapURL} (to refer to the previous result).}

\item{hasSourceURL}{A logical.
True, if this script has sourceURL. Accepted values: \code{~ .res$hasSourceURL} (to refer to the previous result).}

\item{isModule}{A logical.
True, if this script is ES6 module. Accepted values: \code{~ .res$isModule} (to refer to the previous result).}

\item{length}{An integer.
This script length. Accepted values: \code{~ .res$length} (to refer to the previous result).}

\item{stackTrace}{Experimental. A Runtime.StackTrace.
JavaScript top stack frame of where the script parsed event was triggered if available. Accepted values: \code{~ .res$stackTrace} (to refer to the previous result).}

\item{.callback}{A callback function taking one argument. The object passed to
this function is the message received from Chrome: this is a named list
with an element \code{method} (that is equal to \code{"scriptParsed"})
and an element \code{params} which is a named list.
The \code{params} list is composed of
the following element(s): \code{scriptId}, \code{url}, \code{startLine}, \code{startColumn}, \code{endLine}, \code{endColumn}, \code{executionContextId}, \code{hash}, \code{executionContextAuxData} (optional) , \code{isLiveEdit} (optional) , \code{sourceMapURL} (optional) , \code{hasSourceURL} (optional) , \code{isModule} (optional) , \code{length} (optional) , \code{stackTrace} (optional) .}
}
\value{
An async value of class \code{promise}.
The value and the completion of the promise differ according to the use of a callback function.
When \code{.callback} is \code{NULL}, the promise is fulfilled when the event is received.
Its value is a named list of two elements: \code{ws} (the websocket connexion) and \code{result}.
\code{result} is a named list: its elements are the parameters sended by Chrome.
You can chain this promise with another command or event listener.
When \code{.callback} is not \code{NULL}, the promise is fulfilled as soon as the callback is created; the value
is a function without any argument that can be called to cancel the callback. When you use the
\code{.callback} argument, you cannot send the result to any other command or event listener.
}
\description{
\strong{Event description}:
Fired when virtual machine parses script. This event is also fired for all known and uncollected
scripts upon enabling debugger.
}
