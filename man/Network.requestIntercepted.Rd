% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/events_Network.R
\name{Network.requestIntercepted}
\alias{Network.requestIntercepted}
\title{Await the event Network.requestIntercepted or create a callback}
\usage{
Network.requestIntercepted(promise, interceptionId = NULL,
  request = NULL, frameId = NULL, resourceType = NULL,
  isNavigationRequest = NULL, isDownload = NULL, redirectUrl = NULL,
  authChallenge = NULL, responseErrorReason = NULL,
  responseStatusCode = NULL, responseHeaders = NULL,
  .callback = NULL)
}
\arguments{
\item{promise}{An asynchronous result object.}

\item{interceptionId}{A InterceptionId.
Each request the page makes will have a unique id, however if any redirects are encountered
while processing that fetch, they will be reported with the same id as the original fetch.
Likewise if HTTP authentication is needed then the same fetch id will be used. Accepted values: \code{~ .res$interceptionId} (to refer to the previous result).}

\item{request}{A Request.
Accepted values: \code{~ .res$request} (to refer to the previous result).}

\item{frameId}{A Page.FrameId.
The id of the frame that initiated the request. Accepted values: \code{~ .res$frameId} (to refer to the previous result).}

\item{resourceType}{A ResourceType.
How the requested resource will be used. Accepted values: \code{~ .res$resourceType} (to refer to the previous result).}

\item{isNavigationRequest}{A logical.
Whether this is a navigation request, which can abort the navigation completely. Accepted values: \code{~ .res$isNavigationRequest} (to refer to the previous result).}

\item{isDownload}{A logical.
Set if the request is a navigation that will result in a download.
Only present after response is received from the server (i.e. HeadersReceived stage). Accepted values: \code{~ .res$isDownload} (to refer to the previous result).}

\item{redirectUrl}{A character string.
Redirect location, only sent if a redirect was intercepted. Accepted values: \code{~ .res$redirectUrl} (to refer to the previous result).}

\item{authChallenge}{A AuthChallenge.
Details of the Authorization Challenge encountered. If this is set then
continueInterceptedRequest must contain an authChallengeResponse. Accepted values: \code{~ .res$authChallenge} (to refer to the previous result).}

\item{responseErrorReason}{A ErrorReason.
Response error if intercepted at response stage or if redirect occurred while intercepting
request. Accepted values: \code{~ .res$responseErrorReason} (to refer to the previous result).}

\item{responseStatusCode}{An integer.
Response code if intercepted at response stage or if redirect occurred while intercepting
request or auth retry occurred. Accepted values: \code{~ .res$responseStatusCode} (to refer to the previous result).}

\item{responseHeaders}{A Headers.
Response headers if intercepted at the response stage or if redirect occurred while
intercepting request or auth retry occurred. Accepted values: \code{~ .res$responseHeaders} (to refer to the previous result).}

\item{.callback}{A callback function taking one argument. The object passed to
this function is the message received from Chrome: this is a named list
with an element \code{method} (that is equal to \code{"requestIntercepted"})
and an element \code{params} which is a named list.
The \code{params} list is composed of
the following element(s): \code{interceptionId}, \code{request}, \code{frameId}, \code{resourceType}, \code{isNavigationRequest}, \code{isDownload} (optional) , \code{redirectUrl} (optional) , \code{authChallenge} (optional) , \code{responseErrorReason} (optional) , \code{responseStatusCode} (optional) , \code{responseHeaders} (optional) .}
}
\value{
An async value of class \code{promise}.
The value and the completion of the promise differ according to the use of a callback function.
When \code{.callback} is \code{NULL}, the promise is fulfilled when the event is received.
Its value is a named list of two elements: \code{ws} (the websocket connexion) and \code{result}.
\code{result} is a named list: its elements are the parameters sended by Chrome.
You can chain this promise with another command or event listener.
When \code{.callback} is not \code{NULL}, the promise is fulfilled as soon as the callback is created; the value
is a function without any argument that can be called to cancel the callback. When you use the
\code{.callback} argument, you cannot send the result to any other command or event listener.
}
\description{
\strong{Event description}:
Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
mocked.
}
