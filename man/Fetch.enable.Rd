% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/commands_Fetch.R
\name{Fetch.enable}
\alias{Fetch.enable}
\title{Send the command Fetch.enable}
\usage{
Fetch.enable(promise, patterns = NULL, handleAuthRequests = NULL,
  awaitResult = TRUE)
}
\arguments{
\item{promise}{An asynchronous result.}

\item{patterns}{Optional. A list of RequestPattern.
If specified, only requests matching any of these patterns will produce
fetchRequested event and will be paused until clients response. If not set,
all requests will be affected.}

\item{handleAuthRequests}{Optional. A logical.
If true, authRequired events will be issued and requests will be paused
expecting a call to continueWithAuth.}

\item{awaitResult}{Await for the command result?}
}
\value{
An async value of class \code{promise}.
The value and the completion of the promise differ according to the value of \code{awaitResult}.
Its value is a named list of two elements: \code{ws} (the websocket connexion) and \code{result}.
When \code{awaitResult} is \code{TRUE}, the promise is fulfilled once the result of the command is received. In this case,
\code{result} is a void named list.
When \code{awaitResult} is \code{FALSE}, the promise is fulfilled once the command is sent:
\code{result} is equal to the previous result (\code{promise$result}).
In both cases, you can chain this promise with another command or event listener.
}
\description{
Enables issuing of requestPaused events. A request will be paused until client
calls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.
}
