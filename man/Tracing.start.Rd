% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/commands_Tracing.R
\name{Tracing.start}
\alias{Tracing.start}
\title{Send the command Tracing.start}
\usage{
Tracing.start(promise, categories = NULL, options = NULL,
  bufferUsageReportingInterval = NULL, transferMode = NULL,
  streamCompression = NULL, traceConfig = NULL, awaitResult = TRUE)
}
\arguments{
\item{promise}{An asynchronous result.}

\item{categories}{Deprecated. Optional. A character string.
Category/tag filter}

\item{options}{Deprecated. Optional. A character string.
Tracing options}

\item{bufferUsageReportingInterval}{Optional. A numeric.
If set, the agent will issue bufferUsage events at this interval, specified in milliseconds}

\item{transferMode}{Optional. A character string.
Whether to report trace events as series of dataCollected events or to save trace to a
stream (defaults to \code{ReportEvents}). Accepted values: ReportEvents, ReturnAsStream.}

\item{streamCompression}{Optional. A StreamCompression.
Compression format to use. This only applies when using \code{ReturnAsStream}
transfer mode (defaults to \code{none})}

\item{traceConfig}{Optional. A TraceConfig.}

\item{awaitResult}{Await for the command result?}
}
\value{
An async value of class \code{promise}.
The value and the completion of the promise differ according to the value of \code{awaitResult}.
Its value is a named list of two elements: \code{ws} (the websocket connexion) and \code{result}.
When \code{awaitResult} is \code{TRUE}, the promise is fulfilled once the result of the command is received. In this case,
\code{result} is a void named list.
When \code{awaitResult} is \code{FALSE}, the promise is fulfilled once the command is sent:
\code{result} is equal to the previous result (\code{promise$result}).
In both cases, you can chain this promise with another command or event listener.
}
\description{
Start trace events collection.
}
