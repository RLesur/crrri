% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/events_Debugger.R
\name{Debugger.paused}
\alias{Debugger.paused}
\title{Await the event Debugger.paused or create a callback}
\usage{
Debugger.paused(promise, callFrames = NULL, reason = NULL,
  data = NULL, hitBreakpoints = NULL, asyncStackTrace = NULL,
  asyncStackTraceId = NULL, asyncCallStackTraceId = NULL,
  .callback = NULL)
}
\arguments{
\item{promise}{An asynchronous result object.}

\item{callFrames}{A list of CallFrame.
Call stack the virtual machine stopped on. Accepted values: \code{~ .res$callFrames} (to refer to the previous result).}

\item{reason}{A character string.
Pause reason. Accepted values: \code{~ .res$reason} (to refer to the previous result), XHR, DOM, EventListener, exception, assert, debugCommand, promiseRejection, OOM, other, ambiguous.}

\item{data}{NA
Object containing break-specific auxiliary properties. Accepted values: \code{~ .res$data} (to refer to the previous result).}

\item{hitBreakpoints}{A list of string.
Hit breakpoints IDs Accepted values: \code{~ .res$hitBreakpoints} (to refer to the previous result).}

\item{asyncStackTrace}{A Runtime.StackTrace.
Async stack trace, if any. Accepted values: \code{~ .res$asyncStackTrace} (to refer to the previous result).}

\item{asyncStackTraceId}{Experimental. A Runtime.StackTraceId.
Async stack trace, if any. Accepted values: \code{~ .res$asyncStackTraceId} (to refer to the previous result).}

\item{asyncCallStackTraceId}{Experimental. A Runtime.StackTraceId.
Just scheduled async call will have this stack trace as parent stack during async execution.
This field is available only after \code{Debugger.stepInto} call with \code{breakOnAsynCall} flag. Accepted values: \code{~ .res$asyncCallStackTraceId} (to refer to the previous result).}

\item{.callback}{A callback function taking one argument. The object passed to
this function is the message received from Chrome: this is a named list
with an element \code{method} (that is equal to \code{"paused"})
and an element \code{params} which is a named list.
The \code{params} list is composed of
the following element(s): \code{callFrames}, \code{reason}, \code{data} (optional) , \code{hitBreakpoints} (optional) , \code{asyncStackTrace} (optional) , \code{asyncStackTraceId} (optional) , \code{asyncCallStackTraceId} (optional) .}
}
\value{
An async value of class \code{promise}.
The value and the completion of the promise differ according to the use of a callback function.
When \code{.callback} is \code{NULL}, the promise is fulfilled when the event is received.
Its value is a named list of two elements: \code{ws} (the websocket connexion) and \code{result}.
\code{result} is a named list: its elements are the parameters sended by Chrome.
You can chain this promise with another command or event listener.
When \code{.callback} is not \code{NULL}, the promise is fulfilled as soon as the callback is created; the value
is a function without any argument that can be called to cancel the callback. When you use the
\code{.callback} argument, you cannot send the result to any other command or event listener.
}
\description{
\strong{Event description}:
Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
}
