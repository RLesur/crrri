% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/events_DOM.R
\name{DOM.childNodeRemoved}
\alias{DOM.childNodeRemoved}
\title{Await the event DOM.childNodeRemoved or create a callback}
\usage{
DOM.childNodeRemoved(promise, parentNodeId = NULL, nodeId = NULL,
  .callback = NULL)
}
\arguments{
\item{promise}{An asynchronous result object.}

\item{parentNodeId}{A NodeId.
Parent id. Accepted values: \code{~ .res$parentNodeId} (to refer to the previous result).}

\item{nodeId}{A NodeId.
Id of the node that has been removed. Accepted values: \code{~ .res$nodeId} (to refer to the previous result).}

\item{.callback}{A callback function taking one argument. The object passed to
this function is the message received from Chrome: this is a named list
with an element \code{method} (that is equal to \code{"childNodeRemoved"})
and an element \code{params} which is a named list.
The \code{params} list is composed of
the following element(s): \code{parentNodeId}, \code{nodeId}.}
}
\value{
An async value of class \code{promise}.
The value and the completion of the promise differ according to the use of a callback function.
When \code{.callback} is \code{NULL}, the promise is fulfilled when the event is received.
Its value is a named list of two elements: \code{ws} (the websocket connexion) and \code{result}.
\code{result} is a named list: its elements are the parameters sended by Chrome.
You can chain this promise with another command or event listener.
When \code{.callback} is not \code{NULL}, the promise is fulfilled as soon as the callback is created; the value
is a function without any argument that can be called to cancel the callback. When you use the
\code{.callback} argument, you cannot send the result to any other command or event listener.
}
\description{
\strong{Event description}:
Mirrors \code{DOMNodeRemoved} event.
}
