% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EventEmitter.R
\name{EventEmitter}
\alias{EventEmitter}
\title{R6 class to emit some event}
\description{
This is a general purpose class to build on. It is inspired by the node.js EventEmitter class.
See \url{https://nodejs.org/api/events.html}.
}
\examples{
myEmitter <- EventEmitter$new()
myEmitter$on("event",
    function() {
        message("an event occured!")
    }
)
myEmitter$emit("event")
# The listener is still called when "event" fires:
myEmitter$emit("event")
# A listener can be registered once:
myEmitter$once("event",
    function() {
        message("this listener is called only once")
    }
)
# This new listener will be removed when called.
myEmitter$emit("event")
# There is now only one listener:
myEmitter$emit("event")

# An error in a listener will throw an error in R.
myEmitter$on("event", function(...) stop("An error in a listener"))
# Throw an error:
\dontrun{
  myEmitter$emit("event")}

# You can catch an error with a special "error" event that is
# always emitted when an error occured in a listener:
myEmitter$on("error", function(e) cat(conditionMessage(e)))
myEmitter$emit("event")

# As in the node.js class, a "newListener" event is emitted
# before each new listener registration.
# The "newListener" event passes two arguments to its listener(s):
# `eventName` and `listener`.
myEmitter <- EventEmitter$new()
# Use once here to avoid infinite recursion:
myEmitter$once("newListener", function(eventName, listener) {
   if(eventName == "event") {
      myEmitter$on("event", function(...) cat("B"))
   }
})
myEmitter$on("event", function(...) cat("A"))
myEmitter$emit("event") # BA
# The listener attached to the "newListener" event has been
# unregistered and is no more called:
myEmitter$on("event", function(...) cat("C"))
myEmitter$emit("event") # BAC

# Get the number of listeners for an event:
myEmitter$listenerCount("event")

# Get the event names which have been registered:
myEmitter$eventNames()
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-emit}{\code{EventEmitter$emit()}}
\item \href{#method-on}{\code{EventEmitter$on()}}
\item \href{#method-addListener}{\code{EventEmitter$addListener()}}
\item \href{#method-once}{\code{EventEmitter$once()}}
\item \href{#method-listenerCount}{\code{EventEmitter$listenerCount()}}
\item \href{#method-eventNames}{\code{EventEmitter$eventNames()}}
\item \href{#method-rawListeners}{\code{EventEmitter$rawListeners()}}
\item \href{#method-listeners}{\code{EventEmitter$listeners()}}
\item \href{#method-clone}{\code{EventEmitter$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-emit"></a>}}
\if{latex}{\out{\hypertarget{method-emit}{}}}
\subsection{Method \code{emit()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$emit(eventName, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-on"></a>}}
\if{latex}{\out{\hypertarget{method-on}{}}}
\subsection{Method \code{on()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$on(eventName, listener)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addListener"></a>}}
\if{latex}{\out{\hypertarget{method-addListener}{}}}
\subsection{Method \code{addListener()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$addListener(eventName, listener)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-once"></a>}}
\if{latex}{\out{\hypertarget{method-once}{}}}
\subsection{Method \code{once()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$once(eventName, listener)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-listenerCount"></a>}}
\if{latex}{\out{\hypertarget{method-listenerCount}{}}}
\subsection{Method \code{listenerCount()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$listenerCount(eventName)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-eventNames"></a>}}
\if{latex}{\out{\hypertarget{method-eventNames}{}}}
\subsection{Method \code{eventNames()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$eventNames()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rawListeners"></a>}}
\if{latex}{\out{\hypertarget{method-rawListeners}{}}}
\subsection{Method \code{rawListeners()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$rawListeners(eventName)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-listeners"></a>}}
\if{latex}{\out{\hypertarget{method-listeners}{}}}
\subsection{Method \code{listeners()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$listeners(eventName)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EventEmitter$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
