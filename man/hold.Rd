% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hold.R
\name{hold}
\alias{hold}
\title{Hold while an asynchronous task runs}
\usage{
hold(x, timeout = 30,
  msg = paste("The asynchronous job has not finished in the delay of",
  timeout, "seconds."))
}
\arguments{
\item{x}{A \code{\link[promises:promise]{promises::promise()}} object.}

\item{timeout}{Number scalar, timeout in seconds. An error is thrown if the
promise is still pending when the delay expires.}

\item{msg}{Error message when the timeout expires.}
}
\value{
The value of the promise once resolved.
}
\description{
The \code{hold()} function is a helper to turn a \code{\link[promises:promise]{promises::promise()}} in a
synchronous value: the R session awaits the fulfillment of the promise
and returns the value of the fulfilled promise. An error is thrown if the
promise is rejected or a timeout expires. This is a wrapper around
\code{\link[later:run_now]{later::run_now()}}.
}
\details{
This function must not be used inside a function that returns a promise.
Otherwise, this will lead to an infinite loop.
}
\examples{
\dontrun{

library(promises)
library(later)

pr <- promise(~ later(~ resolve("result of the async task"), 1))
value <- hold(pr)
cat(value, "\\n")
}
}
